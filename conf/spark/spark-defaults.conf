#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Default system properties included when running spark-submit.
# This is useful for setting default environmental settings.

# Example:

# The cluster manager to connect to. See the list of allowed master URL's.
spark.master                     yarn
# spark.yarn.archive
spark.yarn.jars                  hdfs://spark/jars/*.jar


# ========== Application Properties ==========
# https://spark.apache.org/docs/latest/configuration.html#application-properties

# spark.driver.memory              2g



# ========== Networking ==========
# https://spark.apache.org/docs/latest/configuration.html#networking

# Port for the driver to listen on. This is used for communicating with the executors and the standalone Master.
# spark.driver.port 	(random)


# spark.blockManager.port 7002

# ========== Compression and Serialization ==========
# https://spark.apache.org/docs/latest/configuration.html#compression-and-serialization

# Class to use for serializing objects that will be sent over the network or need to be cached in serialized form.
# The default of Java serialization works with any Serializable Java object but is quite slow, so we recommend using org.apache.spark.serializer.KryoSerializer and configuring Kryo serialization when speed is necessary. 
# Can be any subclass of org.apache.spark.Serializer.
# spark.serializer                 org.apache.spark.serializer.KryoSerializer


# ========== Runtime Environment ==========
# https://spark.apache.org/docs/latest/configuration.html#runtime-environment
# spark.executor.extraJavaOptions  -XX:+PrintGCDetails -Dkey=value -Dnumbers="one two three"


# ========== Spark UI ==========
# https://spark.apache.org/docs/latest/configuration.html#spark-ui

# Base directory in which Spark events are logged, if spark.eventLog.enabled is true.
# Within this base directory, Spark creates a sub-directory for each application, and logs the events specific to the application in this directory.
# Users may want to set this to a unified location like an HDFS directory so history files can be read by the history server.
spark.eventLog.dir               hdfs://var/log/spark

# Whether to log events for every block update, if spark.eventLog.enabled is true.
# *Warning*: This will increase the size of the event log considerably.
spark.eventLog.enabled           true


# ==========  Spark History Server Configuration Options ==========
# https://spark.apache.org/docs/latest/monitoring.html#spark-history-server-configuration-options

# For the filesystem history provider, the URL to the directory containing application event logs to load.
# This can be a local file:// path, an HDFS path hdfs://namenode/shared/spark-logs or that of an alternative filesystem supported by the Hadoop APIs.
spark.history.fs.logDirectory    hdfs://var/log/spark



# spark.yarn.historyServer.address ${hadoopconf-yarn.resourcemanager.hostname}:18088

